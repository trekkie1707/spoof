package parsers

import (
	"testing"
	"regexp"
)

var stringTests = map[string]string{
	"s": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{5}`,
	"s:1": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{1}`,
	"s:2": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{2}`,
	"s:10": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{10}`,
	"s::a": "[a-z]{5}",
	"s::A": "[A-Z]{5}",
	"s::0": "[0-9]{5}",
	"s::?": `[~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{5}`,
	"s::aA": "[a-zA-Z]{5}",
	"s::A0?": `[A-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{5}`,
	"s:3:A": "[A-Z]{3}",
	"s:5:A0": "[A-Z0-9]{5}",
	"s::": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{5}`,
	"s:-1": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{5}`,
	"s:": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{5}`,
	"s::f": `[a-zA-Z0-9~!@#$%^&*()_+=\-{}|\\\][:";'<>?/.,'` + "`" + `]{5}`,
}

func TestParseString(t *testing.T) {
	for k, v := range stringTests{
		re := regexp.MustCompile(v)
		if ! re.MatchString(ParseString(k)) {
			t.Fatalf("Test failed on item: {{" + k + "}}\nGot value: " + ParseString(k))
		}
	}
}